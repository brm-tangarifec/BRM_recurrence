<?php

/**
 *Módulo para la recurrencia
 * Implement hook_menu()
 */

function BRM_recurrence_menu() {
  return array(
  	'cart/recurrence' => array(
  	'page callback' => 'recurrenceTpl',
  	'access arguments' => TRUE,
  	'access callback' => TRUE,
  	'type' => MENU_CALLBACK,
    ),
    'test/recurrence' => array(
  	'page callback' => 'recurrenceTest',
  	'access arguments' => TRUE,
  	'access callback' => TRUE,
  	'type' => MENU_CALLBACK,
    ),
    'admin/store/settings/brm-recurrence' => array(
      'title'            => t('Manage recurrence settings for BRM'),
      'description'      => t('Configure basic settings for recurrence'),
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('BRM_recurrence_admin_form'),
      'access arguments' => array('admin-recurrence'),

    ),
    //Interna para probar las recurrencias
    'admin/store/settings/brm-recurrence/testeo' => array(
      'title'            => t('Test recurrence for BRM'),
      'description'      => t('Configure the testing basic settings for recurrence'),
      'page callback'    => 'recurrenceTesting',
      'access callback' => TRUE,
      'access arguments' => array('admin-recurrence'),

    ),
    'admin/store/settings/brm-recurrence/testeo/dates' => array(
      'title'            => t('Test recurrence for BRM'),
      'description'      => t('Configure the testing basic settings for recurrence'),
      'page callback'    => 'testeDates',
      'access callback' => TRUE,
      'access arguments' => array('admin-recurrence'),

    ),
    //función para verificar franquicias de tc
    'cart/checkccf' => array(
  	'page callback' => 'verifyCC',
  	'access arguments' => TRUE,
  	'access callback' => TRUE,
  	'type' => MENU_CALLBACK,
    ),
    //Ruta para el submit del formulario
    'cart/recurrence/checkout'=> array(
  	'page callback' => 'recurrencecheck',
  	'access arguments' => TRUE,
  	'access callback' => TRUE,
  	'type' => MENU_CALLBACK,
    ),
  );
}


//Función para generar los permisos de las url del menú
function BRM_recurrence_permission() {
  return array(
    'admin-recurrence' => array(
      'title'       => t("Recurrences Settings"),
      'description' => t("Allow the user to config the recurrence")
    )
  );
}
//Función para alterar el comportamiento de una url

function BRM_recurrence_url_inbound_alter(&$path, $original_path, $path_language) {

  // Se agrega js al carrito
  if (preg_match('|^cart(/.*)?|', $path, $matches)) {
  		drupal_add_js(drupal_get_path('module', 'BRM_recurrence') . '/js/recurrence.js', array( 'scope' => 'footer', 'weight' => 7 , 'group' => JS_LIBRARY, 'preprocess' => FALSE, 'cache' => FALSE));
  }

  if ($path=='cart/checkout') {
  	if(isset($_COOKIE['carritoR']) && !empty($_COOKIE['carritoR'])){
  		drupal_goto('cart/recurrence');
  	}
  }
}

//Función para cargar los temas

function BRM_recurrence_theme($existing, $type, $theme, $path){
    return array(
      'recurrence' => array(
        'template' => 'theme/recurrence'
      ),
      'tesnting' => array(
        'template' => 'theme/testrecurrence'
      ),
  );
}


/*Obtener el tpl para activar la recurrencia*/
function recurrenceTpl(){
	drupal_add_css(drupal_get_path('module', 'BRM_recurrence') .'/css/recurrencia.css' , array('group' => CSS_DEFAULT, 'every_page' => false));
	global $user;
	//printVar($user->uid);
	//printVar(base64_decode($_COOKIE['carritoR']));
	$carritoR=json_decode(base64_decode($_COOKIE['carritoR']));
	//printVar($carritoR);
	$orderActive=getLastOrderUser($user->uid);
      // Create a new order if necessary.
	//printVar($orderActive);
	
	if(!$orderActive){
		$order = uc_order_new($user->uid,'in_checkout');
		$order_id = $order->order_id;	
	}else{
		$order_id = $orderActive['order_id'];
	}
      //Se carga el iva
      $taxC = uc_taxes_rate_load('4');
      //Se llama la orden completa
      $order = uc_order_load($order_id);
      //Se agregan datos a la orden
      if(!getProducsByOrder($order_id)){
      	$order->products = uc_cart_get_contents();
      	saveDataRecurrence($order_id,$carritoR);
      }
      $order->payment_method = 'payulatam';

      //Se arma la data para agregar descuentos o cupones
      $cuponActive='';
      $dataUns['coupons']='';
      $dataUns=serialize($dataUns);
      $order->data=$dataUns;
      //Se guarda la orden
      //printVar(uc_order_product_revive($order->products),'Productos');
      uc_order_save($order);
      $idKits=array();
      foreach ($carritoR as $key => $valueKit) {
      	//printVar($valueKit->kitId);
      	if (!in_array($valueKit->kitId, $idKits)) {
      		array_push($idKits,$valueKit->kitId);
      	}
      }
      //printVar($idKits);
    $variables['idKits']=$idKits;
      //printVar($order);
	$variables['carrito']= uc_order_load($order_id);
	return theme('recurrence',$variables);
}

/*Obtener el tpl para activar la recurrencia*/
function recurrenceTest(){
	//Función de prueba, migrar a la función que crea las ordenes
	//Se estipulan los tiempos
	global $user;
	$orderActive=getLastOrderUser($user->uid);

	/*
	Cargar los datos recibidos desde el post
	*/

	//Se carga la orden
	$order_id = $orderActive['order_id'];
	$orderC = uc_order_load($order_id);
	$orderC->primary_email=$orderLoad->primary_email;
	$orderC->delivery_first_name=$orderLoad->delivery_first_name;
	$orderC->delivery_last_name=$orderLoad->delivery_last_name;
	$orderC->delivery_phone=$orderLoad->delivery_phone;
	$orderC->delivery_street1=$orderLoad->delivery_street1;
	$orderC->delivery_city=$orderLoad->delivery_city;
	$orderC->delivery_zone=$orderLoad->delivery_zone;
	$orderC->delivery_country=$orderLoad->delivery_country;
	$orderC->billing_first_name=$orderLoad->billing_first_name;
	$orderC->billing_last_name=$orderLoad->billing_last_name;
	$orderC->billing_phone=$orderLoad->billing_phone;
	$orderC->billing_street1=$orderLoad->billing_street1;
	$orderC->billing_city=$orderLoad->billing_city;
	$orderC->billing_zone=$orderLoad->billing_zone;
	$orderC->billing_country=$orderLoad->billing_country;
	$orderC->order_total=$orderLoad->order_total;
	$orderC->payment_method = 'payulatam';
	//Se actualiza el estado a payment received
	$orderC->order_status = 'payment_received';
    //Se arma la data para agregar descuentos o cupones
	$cuponActive='';
	$dataUns['coupons']='';
	$dataUns=serialize($dataUns);
	$orderC->data=$dataUns;
	//Se guarda la orden
	//printVar(uc_order_product_revive($order->products),'Productos');
	uc_order_save($orderC);

	$variables['carrito']='Hola, soy una orden de prueba';
	return theme('tesnting',$variables);
}
//función para poner el estado de recurrencia
function recurrenceStatus($order_id){
	db_update('uc_orders')->fields(array(
		'order_status' => 'in_recurrence'
	))
	->condition('order_id',$order_id)
	->execute();
}
//función para actualizar el total de la orden
function recurrenceTotal($order_id,$total){
	db_update('uc_orders')->fields(array(
		'order_total' => $total
	))
	->condition('order_id',$order_id)
	->execute();
}
//Función para obtener los line items
function lineItemsOrder($order_id){
	$datax=array();
	$query=db_select('uc_order_line_items','ul');
	$result=$query->fields('ul',array('type','title','amount','weight','data'))
	->condition('ul.order_id',$order_id,'=')
	//->condition('type','tax','!=')
	->execute();
	while ($record=$result->fetchAssoc()) {
		$datax[]=$record;
	}

	return $datax;
}

//función para actualizar el envío en las ordenes
function updateLineShipping($orde_id,$amount){
	$datax=array();
	$query=db_select('uc_order_line_items','ul');
	$result=$query->fields('ul',array('line_item_id'))
	->condition('ul.order_id',$orde_id,'=')
	->condition('ul.type','shipping','=')
	//->condition('type','tax','!=')
	->execute();
	$record=$result->fetchAssoc();

	if(empty($record)){
		uc_order_line_item_add($orde_id,'shipping','Envío',$amount,1,'');
	}else{
		db_update('uc_order_line_items')->fields(array(
			'amount' => $amount
		))
		->condition('order_id',$orde_id)
		->condition('type','shipping')
		->execute();
	}
	//die();
}
//función para insertar los productos por orden
function saveProductsByOrder($order_id,$campos,$time){
	//printVar($campos,$order_id);
	for ($i=0; $i <count($campos) ; $i++) { 
		//printVar($campos[$i]);
		//Si el id del producto y la orden
		$dataU=unserialize($campos[$i]['data']);
		$query=db_select('brm_recurrence','br');
		$result=$query->fields('br',array('id'))
		->condition('br.order_id',$order_id,'=')
		->condition('br.product_id',$campos[$i]['nid'],'=')
		->condition('br.active','y','=')
		->condition('br.recurrence_days',$time,'=')
		->condition('br.kit_id',$dataU['kit_id'],'=')
		->execute();
		$record=$result->fetchAssoc();
		//Hasta acá
		if(!empty($record)){
			$return = db_insert('uc_order_products')
			->fields(array(
			'order_id' => $order_id,
			'nid' => $campos[$i]['nid'],
			'title' => $campos[$i]['title'],
			'model' => $campos[$i]['model'],
			'qty' =>$campos[$i]['qty'],
			'cost' =>$campos[$i]['cost'],
			'price'=>$campos[$i]['price'],
			'weight'=>$campos[$i]['weight'],
			'weight_units'=>$campos[$i]['weight_units'],
			'data'=>$campos[$i]['data'],
			))->execute();
		}
	}
}
//Función para obtener los datos de la orden
function getOrderById($order_id){
	$laOrden=uc_order_load($order_id);

	return $laOrden;
}
//Función para guardar el array con key
function recurrence_array_push_assoc($array, $key, $value){
	$array[$key] = $value;
	return $array;
}
//función para actualizar el id de los productos por orden
function getLastOrderProduct(){
	$query=db_select('uc_order_products','uop');
	$result=$query->fields('uop',array('order_product_id'))
	->range(0, 1)
	->orderBy('uop.order_product_id', 'DESC')
	->execute();
	$record=$result->fetchAssoc();
	//printVar($record['order_product_id']);
	return $record['order_product_id'];

}
//Función para obtener la última orden
function getLastOrderDataUser($userId){
  //printVar($userId);
  $data=array();
  $re=db_select('uc_orders','ucu');
    $result=$re->fields('ucu',array('order_id'))
    ->condition('ucu.uid',$userId,'=')
    ->condition('ucu.order_status','in_recurrence','=')
    ->range(0,1)
    ->orderBy('ucu.order_id', 'DESC')
    ->execute()
    ->fetchAssoc();
  //printVar($result);
  return $result;
}


//Función para obtener los productos por kit
function orderByIdKit($idKit){
	$dataK=array();
	$query=db_select('uc_product_kits','upk');
	$result=$query->fields('upk',array('product_id'))
	->condition('upk.nid',$idKit,'=')
	->execute();
	while($record=$result->fetchAssoc()){
		$dataK[]=$record['product_id'];
	}
	return $dataK;
}
//Función para obtener los prodcutos y los kits
function getProducstByOrder($order_id){
	$dataK=array();
	$query=db_select('uc_order_products','uop');
	$result=$query->fields('uop',array('nid','data'))
	->condition('uop.order_id',$order_id,'=')
	->execute();
	while($record=$result->fetchAssoc()){
		$dataK[]=$record['product_id'];
	}
	return $dataK;
}
//Función para guardar las ordenes para almacenar las ordenes recurrentes
function saveDataRecurrence($order_id,$data=array()){
	$createDate=date('Y-m-d H:i:s');

	//printVar($order_id,'Orden');

	foreach ($data as $key => $value) {
		//printVar($value,'datos');
		for ($i=0; $i < count($value->productId) ; $i++) { 
			//printVar($value->productId[$i],'Product ID');
			saveRecurrenceByProduct($order_id,$value->kitId,$value->productId[$i],$value->frecuencia,$createDate);
		}
	}

/*;*/

}

//Función para guardar los datos por producto
function saveRecurrenceByProduct($order_id,$kitId,$productId,$drecurrence,$createDate){
	if($drecurrence!=0){
		$return = db_insert('brm_recurrence')
		->fields(array(
			'order_id' => $order_id,
			'kit_id' => $kitId,
			'product_id' => $productId,
			'id_brm_recurrence_token' => 1000000,
			'recurrence_days' =>$drecurrence,
			'active' =>'n',
			'created'=>$createDate,
			'modificate'=>$createDate,
		))->execute();
		return $return;

	}
}


//Función para comprobar si existen productos para la orden
function getProducsByOrder($order_id){
	$query=db_select('uc_order_products','upc');
	$result=$query->fields('upc',array('order_id'))
	->condition('upc.order_id',$order_id,'=')
	->execute();
	$return=$result->fetchAssoc();

	if(!empty($return)){
		return TRUE;
	}else{
		return FALSE;
	}
}

//Función para crear ordenes automaticas
function custonOrderCreate(){
	//Función de prueba, migrar a la función que crea las ordenes
	//Se comprueba que la bandera se encuentre arriba, para ejecutar
	//subirBandera();
	if(getBanderaRecurrence()=="S"){
		//Se estipulan los tiempos
		$recurrencia=array('14','30','60','90','120');
		//printVar(uc_order_load('1299'),'La orden');
		//Se recorren los productos por ordenes
		for ($i=0; $i <count($recurrencia) ; $i++) {
			$RecurrerORder=getOrdersByTime($recurrencia[$i]);
			if(!empty($RecurrerORder)){
				//printVar($RecurrerORder,'Recurrente');
				foreach ($RecurrerORder as $key => $value) {
					//$dataOrder=getProducDataByOrder($key);
					$orderLoad=getOrderById($key);
					//Se obtiene la recurrencia por usuario
					$orderActive=getLastOrderDataUser($orderLoad->uid);
					//printVar($orderActive);
				      // Create a new order if necessary.
					//printVar($orderActive);
					if(!$orderActive){
						$orderC = uc_order_new($orderLoad->uid,'in_checkout');
						$order_id = $orderC->order_id;
					}else{
						$order_id = $orderActive['order_id'];
					}
					$orderC->order_status='in_recurrence';
					recurrenceStatus($order_id);
					
				      //Se carga el iva
				      $taxC = uc_taxes_rate_load('4');
				      //Se llama la orden completa
				      $orderC = uc_order_load($order_id);
				      //Se agregan datos a la orden
				      if(!getProducsByOrder($order_id)){
				      	$lastProduct=getLastOrderProduct();
				      	$newLast=(int)$lastProduct+1;
				      	$conteo=(int)$newLast;
				      	$productsNewOrder=array();
				      	$productInt=array();
				      	$productsOrders=getProducDataByOrder($key);
				      	//printVar($productsOrders,'Los productos');
				      	saveProductsByOrder($order_id,$productsOrders,$recurrencia[$i]);
				      	//BRM_ponds_kit_uc_add_to_cart();
				      
				      	//$orderC->products = $productsNewOrder;
				      	//Si el id del producto y la orden 
				      	$message='Orden creada para recurrencia obtenida de la orden '.$key;
				      	uc_order_comment_save($order_id,$orderLoad->uid, $message, $type = 'admin', $status = 'Pending', $notify = FALSE);
				      	//printVar(lineItemsOrder($key),$key);
					      $callShipping=lineItemsOrder($key);
					      for ($i=0; $i < count($callShipping); $i++) { 
					      	//printVar($callShipping[$i]);
					      	uc_order_line_item_add($order_id,$callShipping[$i]['type'],$callShipping[$i]['title'],$callShipping[$i]['amount'],$callShipping[$i]['weight'], $callShipping[$i]['data']);
					      }
				      }

				      //

				      //printVar($orderLoad->line_items,'La ordenOrg');
				      //printVar($orderC->line_items,'La orden');
				      $orderC->primary_email=$orderLoad->primary_email;
				      $orderC->delivery_first_name=$orderLoad->delivery_first_name;
				      $orderC->delivery_last_name=$orderLoad->delivery_last_name;
				      $orderC->delivery_phone=$orderLoad->delivery_phone;
				      $orderC->delivery_street1=$orderLoad->delivery_street1;
				      $orderC->delivery_city=$orderLoad->delivery_city;
				      $orderC->delivery_zone=$orderLoad->delivery_zone;
				      $orderC->delivery_country=$orderLoad->delivery_country;
				      $orderC->billing_first_name=$orderLoad->billing_first_name;
				      $orderC->billing_last_name=$orderLoad->billing_last_name;
				      $orderC->billing_phone=$orderLoad->billing_phone;
				      $orderC->billing_street1=$orderLoad->billing_street1;
				      $orderC->billing_city=$orderLoad->billing_city;
				      $orderC->billing_zone=$orderLoad->billing_zone;
				      $orderC->billing_country=$orderLoad->billing_country;
				      $orderC->order_total=$orderLoad->order_total;
				      $iva=$ordenS->order_total*$taxC->rate;
				      $total=$ordenS->order_total+$iva;
				      //$orderC->order_total=$total;
				      $orderC->payment_method = 'payulatam';

				      //Se arma la data para agregar descuentos o cupones
				      $cuponActive='';
				      $dataUns['coupons']='';
				      $dataUns=serialize($dataUns);
				      $orderC->data=$dataUns;
				      //Se guarda la orden
				      //printVar(uc_order_product_revive($order->products),'Productos');
				      uc_order_save($orderC);
			      
				      //Se debe actualizar el estado de la orden para separlas

					//Se envía un email al correo registrado
				    $to = variable_get('BRM_recurrence_mail_informer','');
					$subject = "Aproximación al tope de facturación Club Ponds";
					$message = "<html><head><title>Factura número".$factura."en Club Ponds</title></head><body><center><h2>Queda menos del 10% de números de facturas</h2><p>Hemos clonado la orden ".$key." y el id de la nueva orden es ".$order_id." </p></center></body></html>";
					$headers = "MIME-Version: 1.0" . "\r\n";
					$headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";
					$headers .= "From: cristian.tangarife@brm.com.co <cristian.tangarife@brm.com.co>"."\r\n";
					$headers .= 'Bcc: cristian.tangarife@brm.com.co' . "\r\n";
					mail($to,$subject,$message,$headers);
				}
			}
		}
		//Se baja la bandera al crear las ordenes
		bajarBandera();
	
	}
}
//función para obtener los productos por fecha
function getOrdersByTime($time){
	//se hace el llamado a las ordenes dependiendo de la cantidad de tiempo
	$datax=array();
	$fechaRequest=date('Y-m-d');
	$fechaRequestN=date('Y-m-d', strtotime($fechaRequest. ' - '.$time.' days'));
	$start=date('Y-m-d 00:00:00', strtotime($fechaRequestN));
	$endt=date('Y-m-d 23:59:59', strtotime($fechaRequestN));
	$query=db_select('brm_recurrence','br');
	$result=$query->fields('br',array('order_id','kit_id','product_id','id_brm_recurrence_token','active','recurrence_days','modificate'))
	->condition('br.active','y','=')
	->condition('br.modificate',array($start,$endt), 'BETWEEN')
	->execute();
	
	while($record=$result->fetchAssoc()){
		$datax[]=$record;
	}
	$datar=array();
	for ($i=0; $i < count($datax) ; $i++) { 
		$idOrden = $datax[$i]['order_id'];
		if (count($datar[$idOrden])==0) {
			$datar[$idOrden] = array();
		}
		array_push($datar[$idOrden],$datax[$i]);
	}
	return $datar;
}

//Función para obtener los datos del producto por orden
function getProducDataByOrder($order_id){
	$datax=array();
	$query=db_select('uc_order_products','upc');
	$result=$query->fields('upc',array('order_id','nid','title','model','qty','cost','price','weight','weight_units','data'))
	->condition('upc.order_id',$order_id,'=')
	->execute();
	//$return=$result->fetchAssoc();
	while($record=$result->fetchAssoc()){
		$datax[]=$record;
	}

	return $datax;
}

//función para actualizar el token y estado de la orden recurrente
function updateRecurrenceByOrden($order_id,$tokenId){
	db_update('brm_recurrence')->fields(array(
    "id_brm_recurrence_token"=>$tokenId,
    "modificate"=> date('Y-m-d H:i:s'),
    ))
   ->condition('order_id', $order_id)
   ->execute();
}

//función para actualizar las ordenes recurrentes desde payú

//function updateRecurrenceOrder($order_id,$state){}

//Función para crear el formulario de configuración,
function BRM_recurrence_admin_form($form, &$form_state) {
  $form = array(
    'BRM_recurrence_hour_request' => array(
      '#type'   => 'textfield',
      '#attributes' => array(
        ' type' => 'time', // insert space before attribute name :)
    	),
      '#title'  => t("Hour to request"),
      '#description'  => t("Field to enter the time at which the payu call is executed"),
      '#default_value'  =>  strtoupper(trim(ltrim(rtrim(variable_get('BRM_recurrence_hour_request')))))
    ),
    'BRM_recurrence_hour_down' => array(
      '#type'   => 'textfield',
      '#title'  => t("Hout to down the 'bandera'"),
      '#attributes' => array(
        ' type' => 'time', // insert space before attribute name :)
    	),
      '#description'  => t("Field to enter the time at which the flag is down"),
      '#default_value'  =>  trim(ltrim(rtrim(variable_get('BRM_recurrence_hour_down'))))
    ),
    'BRM_recurrence_mail_informer' => array(
      '#type'   => 'textfield',
      '#title'  => t("Mail information"),
      '#attributes' => array(
        ' type' => 'email', // insert space before attribute name :)
    	),
      '#description'  => t("Mail to send the approximate billing alert"),
      '#default_value'  =>  trim(ltrim(rtrim(variable_get('BRM_recurrence_mail_informer'))))
    ),
  );

  return system_settings_form($form);
}

//Función para ejecutar una función si la bandera se encuentra activa
function getBanderaRecurrence(){
	$data=array();
	$query=db_select('brm_bandera','bn');
	$result=$query->fields('bn',array('state'))
	->condition('id',1,'=')
	->range(0,1)
	->execute();
	$return=$result->fetchAssoc();

	return $return['state'];
}
//Función para bajar la bandera cada hora
function bajarBandera(){
	if(getBanderaRecurrence()=="S"){
		db_update('brm_bandera')->fields(array(
			"state"=>'N',
			"modificate" =>date('Y-m-d H:i:s')
		))
		->condition('id','1','=')
		->execute();
	}
}
//función para subir la bandera
function subirBandera(){
	if(getBanderaRecurrence()=="N"){
		db_update('brm_bandera')->fields(array(
			"state"=>'S',
			"modificate" =>date('Y-m-d H:i:s')
		))
		->condition('id','1','=')
		->execute();
	}
}



/*/Se define el cron
function BRM_recurrence_cronapi() {
	//Se setea la hora de ejecución
	$hora=variable_get('BRM_recurrence_hour_request', '');
	//$onlyHour=date('H', $hora);
	$onlyHour=explode(':',$hora);

	//Se setea la hora para bajar automaticamente la bandera
	$huorD=variable_get('BRM_recurrence_hour_down', '');
	$downHor=explode(':',$huorD);

  $items['bajar_bandera'] = array(
  	'title' => t('Bajar la Bandera'),
    'description' => 'Bajar la bandera cada hora para evitar la creación de ordenes',
    'callback' => 'bajarBandera',
    'rule' => $downHor[1].' '.$downHor[0].' * * * *', // Every day and hour put into the config
  );
  $items['OrdenesPayu'] = array(
  	'title' => t('Ordenes recurrentes'),
    'description' => 'Función para ejecutar la creación de ordenes cada 24 horas',
    'callback' => 'custonOrderCreate',
    'rule' => $onlyHour[1].' '.$onlyHour[0].' * * * *', // Every day and hour put into the config
  );


  return $items;
}*/


function BRM_recurrence_cronapi() {
	//Se setea la hora de ejecución
	$hora=variable_get('BRM_recurrence_hour_request', '');
	//$onlyHour=date('H', $hora);
	$onlyHour=explode(':',$hora);
	//Se setea la hora para bajar automaticamente la bandera
	$huorD=variable_get('BRM_recurrence_hour_down', '');
	$downHor=explode(':',$huorD);

	switch ($onlyHour[1]) {
		case '00':
			$ini=60;
			$upBandera=$ini-5;
			if($onlyHour[0]=='00'){
				$hora=24;
			}else{
				$hora=(int)$onlyHour[0];
			}
			$hUpBandera=$hora-1;
			break;
		case '01':
			$ini=61;
			$upBandera=$ini-5;
			if($onlyHour[0]=='00'){
				$hora=24;
			}else{
				$hora=(int)$onlyHour[0];
			}
			$hUpBandera=$hora-1;
			break;
		case '02':
			$ini=62;
			$upBandera=$ini-5;
			if($onlyHour[0]=='00'){
				$hora=24;
			}else{
				$hora=(int)$onlyHour[0];
			}
			$hUpBandera=$hora-1;
			break;
		case '03':
			$ini=63;
			$upBandera=$ini-5;
			if($onlyHour[0]=='00'){
				$hora=24;
			}else{
				$hora=(int)$onlyHour[0];
			}
			$hUpBandera=$hora-1;
			break;
		case '04':
			$ini=64;
			$upBandera=$ini-5;
			if($onlyHour[0]=='00'){
				$hora=24;
			}else{
				$hora=(int)$onlyHour[0];
			}
			$hUpBandera=$hora-1;
			break;
		
		default:
			$ini=(int)$onlyHour[1];
			$upBanderaC=$ini-5;
			$hUpBandera=$onlyHour[0];
			$upBandera = str_pad($upBanderaC, 2, '0', STR_PAD_LEFT);
			break;
	}

  $items = array();
  //Se baja la bandera
  $items['bajar_bandera'] = array(
    'title' => t('Bajar la Bandera'),
    'callback' => 'bajarBandera',
    'enabled' => TRUE,
    'tags' => array('Recurrencia'),
    'scheduler' => array(
      'name' => 'crontab',
      'crontab' => array(
        'rules' => array($downHor[1].' '.$downHor[0].' * * *'),
      ),
    ),
    'launcher' => array(
      'name' => 'serial',
      'serial' => array(
        'thread' => 'any',
      ),
    ),
  );
  $items['subir_bandera'] = array(
    'title' => t('Subir la Bandera'),
    'callback' => 'subirBandera',
    'enabled' => TRUE,
    'tags' => array('Recurrencia'),
    'scheduler' => array(
      'name' => 'crontab',
      'crontab' => array(
        'rules' => array($upBandera.' '.$hUpBandera.' * * *'),
      ),
    ),
    'launcher' => array(
      'name' => 'serial',
      'serial' => array(
        'thread' => 'any',
      ),
    ),
  );
  //Se crean las ordenes a la hora estipulada
  $items['OrdenesPayu'] = array(
    'title' => t('Ordenes recurrentes'),
    'callback' => 'custonOrderCreate',
    'enabled' => TRUE,
    'tags' => array('Recurrencia'),
    'scheduler' => array(
      'name' => 'crontab',
      'crontab' => array(
        'rules' => array($onlyHour[1].' '.$onlyHour[0].' * * *'),
      ),
    ),
    'launcher' => array(
      'name' => 'serial',
      'serial' => array(
        'thread' => 'any',
      ),
    ),
  );

  return $items;
}
/*
**Creación de ordenes
$order = uc_order_new($user->uid, 'pending');
      $order_id = $order->order_id;
uc_order_save($order);
      $order = uc_order_load($order_id);

*/
//Función para comprobar la franquicia de la tarjeta de crédito
function verifyCC(){
	$post=filter_input_array(INPUT_POST);

	if($post['vartC']=='verify'){
		$franquicia=check_cc($post['consul']);
		//printVar($franquicia);
		drupal_json_output(strtoupper($franquicia));

	}
}
function check_cc($cc, $extra_check = false){
    $cards = array(
        "visa" => "(4\d{12}(?:\d{3})?)",
        "amex" => "(3[47]\d{13})",
        "jcb" => "(35[2-8][89]\d\d\d{10})",
        "maestro" => "((?:5020|5038|6304|6579|6761)\d{12}(?:\d\d)?)",
        "solo" => "((?:6334|6767)\d{12}(?:\d\d)?\d?)",
        "mastercard" => "(5[1-5]\d{14})",
        "switch" => "(?:(?:(?:4903|4905|4911|4936|6333|6759)\d{12})|(?:(?:564182|633110)\d{10})(\d\d)?\d?)",
    );
    $names = array("Visa", "American Express", "JCB", "Maestro", "Solo", "Mastercard", "Switch");
    $matches = array();
    $pattern = "#^(?:".implode("|", $cards).")$#";
    $result = preg_match($pattern, str_replace(" ", "", $cc), $matches);
    if($extra_check && $result > 0){
        $result = (validatecard($cc))?1:0;
    }
    return ($result>0)?$names[sizeof($matches)-2]:false;
}

//Función para calcular el envío en las recurrencias
function shippingRecurrence($idkitR=array(),$value){
	//ids para excluir el valor del envío
	$idKits=getIdKits();
	//Valor minimo para no cobrar envío
	$banderaKit='N'; #Se busca si hay un kit para exentuar el envío
	for ($i=0; $i < count($idkitR) ; $i++) {
		if(in_array($idkitR[$i],$idKits)){
		 $banderaKit='N';
		 break;	
		}
	}

	if($banderaKit=='N' && $value<=70000){
		$envio=8000;
	}else{
		$envio=0;
	}
	return $envio;
}
//función para obtener los id de los kits
function getIdKits(){
	$datan=array();
	$query=db_select('node','n');
	$result=$query->fields('n',array('nid'))
	->condition('n.type','product_kit','=')
	->condition('n.status',1,'=')
	->execute();
	while($record=$result->fetchAssoc()){
		$datan[]=$record['nid'];
	}

	return $datan;
}

//Función para crear la interna de testeo
function recurrenceTesting(){
	$datax=array();
	$bandera=createBandera();

	$query = db_select('brm_recurrence', 'brmR');
	$result = $query->fields('brmR',array('order_id','kit_id','product_id','id_brm_recurrence_token','recurrence_days','active','created','modificate'))
	->orderBy('brmR.id', 'ASC')
	->execute();
	$datap=0;
  $out = '
  <label>Estado bandera:</label><span>'.$bandera["state"].'</span>
  <form action="/admin/store/settings/brm-recurrence/testeo/dates" method="POST" name="formListedRecurrence" id="formListedRecurrence" style="overflow-x: scroll;">
  <button type="submit">Probar</button><br>
  <label><input type="checkbox" value="14" id="test14" name="test14">Probar 14 días</label><br>
  <label><input type="checkbox" value="30" id="test30" name="test30">Probar 1 mes</label><br>
  <label><input type="checkbox" value="60" id="test60" name="test60">Probar 2 meses</label><br>
  <label><input type="checkbox" value="90" id="test90" name="test90">Probar 3 meses</label><br>
  <label><input type="checkbox" value="120" id="test120" name="test120">Probar 4 meses</label>';
 while($record = $result->fetchAssoc()) {
    //printVar($record,'Recorrido');
    //$datap++;
    $datax['orden'.$datap]['order_id']=$record['order_id'];
    $datax['orden'.$datap]['kit_id']=$record['kit_id'];
    $datax['orden'.$datap]['product_id']=$record['product_id'];
    $datax['orden'.$datap]['id_brm_recurrence_token']=$record['id_brm_recurrence_token'];
    $datax['orden'.$datap]['recurrence_days']=$record['recurrence_days'];
    $datax['orden'.$datap]['active']=$record['active'];
    $datax['orden'.$datap]['created']=$record['created'];
    $datax['orden'.$datap]['modificate']=$record['modificate'];
    //$datax['orden'.$datap]['activate']='<label><input type="checkbox" value="'.$record['order_id'].'" id="'.$record['order_id'].' name="'.$record['order_id'].'">Activar orden</label><br>';
    $datap++;
  }

  $header  = array('Orden','Kit','prodcuto','idToken','Recurrencia','estado recurrencia','F Creacion','F modificacion');
  //$header  = array('Orden');
  $rows = $datax;
  //$rows=array('registro','orden');
  //var_dump($rows);
  //die();
  return $out.theme('table', array( 'header' => $header , 'rows'=> $rows) ).'<button type="submit">Probar</button></form>';

}
//función para crear la bandera en caso de que no exista
function createBandera(){
	$data=array();
	$query=db_select('brm_bandera','bb');
	$result=$query->fields('bb',array('id','state'))
	->condition('bb.id',1,'=')
	->execute();

	$record=$result->fetchAssoc();

	if(empty($record)){
		$record2=db_insert('brm_bandera')
		->fields(array(
			'state' => 'N',
			'created' => date('Y-m-d H:i:s'),
			'modificate' => date('Y-m-d H:i:s')
		))->execute();

		$query=db_select('brm_bandera','bb');
		$result=$query->fields('bb',array('id','state'))
		->condition('bb.id',1,'=')
		->execute();

		$record=$result->fetchAssoc();

		$bandera=$record;

	}else{
		$bandera = $record;
	}
	return $bandera;
}
//función para actualizar los estados las fechas
function testeDates(){
	$filtro	=filter_input_array(INPUT_POST);
	//printVar('entramos acá');
	//printVar($filtro,'filtro');
	$consul=array();
	foreach ($filtro as $key => $value) {
		array_push($consul,$value);
	}
		//printVar($consul);

		for ($i=0; $i <count($consul) ; $i++) { 
			$datax=array();
			$query=db_select('brm_recurrence','brr');
			$result=$query->fields('brr',array('id','modificate'))
			->condition('brr.recurrence_days',$consul[$i],'=')
			->execute();

			while ($rescord=$result->fetchAssoc()) {
				//printVar($rescord,$consul[$i]);
				$fechaAnterior=date('Y-m-d H:i:s', strtotime($rescord['modificate']."-".$consul[$i]." days"));
				//printVar($fechaAnterior,'Nueva fecha');
				db_update('brm_recurrence')->fields(array(
					'active' => 'y',
					'modificate' => $fechaAnterior
				))
				->condition('id',$rescord['id'])
				->execute();
			}
		}

	drupal_goto('admin/store/settings/brm-recurrence/testeo');
}

//función para actualizar el número de cuotas a la orden seleccionada

function recurrenceDeferred($order_id,$deferred){
	db_update('brm_recurrence')->fields(array(
			"deferred"=>$deferred,
			"modificate" =>date('Y-m-d H:i:s')
		))
		->condition('order_id',$order_id,'=')
		->execute();
}

//función para actualizar los estados a y cuando el módulo payu responda 4 "payment_received"

function updateActiveRecurrenceByOrden($order_id){
	db_update('brm_recurrence')->fields(array(
    "active"=>'y',
    "modificate"=> date('Y-m-d H:i:s'),
    ))
   ->condition('order_id', $order_id)
   ->execute();
}

function recurrencecheck(){
	$varPost=filter_input_array(INPUT_POST);
	global $user;
	//printVar($user);
	$params=array();
	//datsos para creación de token
	$params['nombre']=$varPost['tarjetahabiente'];
	$params['cedula']=$varPost['cedulahabiente'];
	$params['numtc']=$varPost['numtc'];
	$params['expiration']=$varPost['aaaa'].'/'.$varPost['mm'];
	$params['franquicia']=$varPost['franquicia'];
	$params['cosec']=$varPost['cosec'];
	$params["cuotas"]=$varPost['cuotas'];


	//Datos para la orden
	$params['BUYER_NAME']=$varPost['panes']['delivery']['delivery_first_name'].' '.$varPost['panes']['delivery']['delivery_last_name'];
	$params['BUYER_EMAIL']=$user->mail;
	$params['BUYER_CONTACT_PHONE']=$varPost['panes']['delivery']['delivery_phone'];
	$params['BUYER_DNI']=$varPost['cedulahabiente'];
	$params['BUYER_STREET']=removeAccents(limpiaCadena($varPost['panes']['delivery']['delivery_street1']));;
	$params['BUYER_STREET_2']='';
	$params['BUYER_CITY']=$varPost['panes']['delivery']['delivery_city'];
	$params['BUYER_STATE']=$varPost['panes']['delivery']['delivery_zone'];
	$params['BUYER_PHONE']=$varPost['panes']['delivery']['delivery_phone'];

	if($varPost['panes']['billing']['copy_address']=='1'){
		$params['PAYER_NAME']=$varPost['panes']['delivery']['delivery_first_name'].' '.$varPost['panes']['delivery']['delivery_last_name'];
		$params['PAYER_EMAIL']=$user->mail;
		$params['PAYER_CONTACT_PHONE']=$varPost['panes']['delivery']['delivery_phone'];
		$params['PAYER_DNI']=$varPost['cedulahabiente'];
		$params['PAYER_STREET']=removeAccents(limpiaCadena($varPost['panes']['delivery']['delivery_street1']));
		$params['PAYER_STREET_2']='';
		$params['PAYER_CITY']=$varPost['panes']['delivery']['delivery_city'];
		$params['PAYER_STATE']=$varPost['panes']['delivery']['delivery_zone'];
		$params['PAYER_PHONE']=$varPost['panes']['delivery']['delivery_phone'];
	}else{
		$params['PAYER_NAME']=$varPost['panes']['billing']['billing_first_name'].' '.$varPost['panes']['billing']['billing_last_name'];
		$params['PAYER_EMAIL']=$user->mail;
		$params['PAYER_CONTACT_PHONE']=$varPost['panes']['billing']['billing_phone'];
		$params['PAYER_DNI']=$varPost['cedulahabiente'];
		$params['PAYER_STREET']=removeAccents(limpiaCadena($varPost['panes']['billing']['billing_street1']));
		$params['PAYER_STREET_2']='';
		$params['PAYER_CITY']=$varPost['panes']['billing']['billing_city'];
		$params['PAYER_STATE']=$varPost['panes']['billing']['billing_zone'];
		$params['PAYER_PHONE']=$varPost['panes']['billing']['billing_phone'];
	}
//die();
	//Se obtiene la recurrencia por usuario
	$orderActive=getLastOrderUser($user->uid);
	//printVar($orderActive,'Orden activa');
	// Create a new order if necessary.
	//printVar($orderActive);
	$order_id = $orderActive['order_id'];
	//Se carga el iva
	$orderC = uc_order_load($order_id);
	//printVar($orderC);
	//die();
	$orderC->delivery_first_name=$varPost['panes']['delivery']['delivery_first_name'];
	$orderC->delivery_last_name=$varPost['panes']['delivery']['delivery_last_name'];
	$orderC->delivery_phone=$orderLoad->delivery_phone;
	$orderC->delivery_street1=$orderLoad->delivery_street1;
	$orderC->delivery_city=$orderLoad->delivery_city;
	$orderC->delivery_zone=$orderLoad->delivery_zone;
	$orderC->delivery_country=$orderLoad->delivery_country;
	if($varPost['panes']['billing']['copy_address']=='1'){
		$orderC->billing_first_name=$varPost['panes']['delivery']['delivery_first_name'];
		$orderC->billing_last_name=$varPost['panes']['delivery']['delivery_last_name'];
		$orderC->billing_phone=$varPost['panes']['delivery']['delivery_phone'];
		$orderC->billing_street1=$varPost['panes']['delivery']['delivery_street1'];
		$orderC->billing_city=$varPost['panes']['delivery']['delivery_city'];
		$orderC->billing_zone=$varPost['panes']['delivery']['delivery_zone'];
	}else{
		$orderC->billing_first_name=$varPost['panes']['billing']['billing_first_name'];
		$orderC->billing_last_name=$varPost['panes']['billing']['billing_last_name'];
		$orderC->billing_phone=$varPost['panes']['billing']['billing_phone'];
		$orderC->billing_street1=$varPost['panes']['billing']['billing_street1'];
		$orderC->billing_city=$varPost['panes']['billing']['billing_city'];
		$orderC->billing_zone=$varPost['panes']['billing']['billing_zone'];
	}
	$orderC->payment_method = 'payulatam';
	$cuponActive='';
	$dataUns['coupons']='';
	$dataUns=serialize($dataUns);
	$orderC->data=$dataUns;
	//se envia la orden
	$params['orderId']=$order_id;
	//Se guarda la orden
	 //printVar(uc_order_product_revive($order->products),'Productos');
	uc_order_save($orderC);

	$params['value']=$orderC->order_total;

	//función para creación del token y cobro de payú
	$tokenJson=validDataFormPayU($params);

	printVar($tokenJson,'HOla Json');
	//actualiza el token
	if($tokenJson->transactionResponse->state=='APPROVED'){
		$watchdog_variables = array(
			'!order_id' => $order_id,
			'!current_order_status' => $orderC->order_status,
			'!reference_pol' => check_plain('1 Transacción aprobada'),
		);
		$comment = t("Order Completed.") . ' ' . t("PayU Latam # !reference_pol", $watchdog_variables);
       	uc_order_comment_save($order_id, 0, $comment, 'order');
       	$plata = (int)$orderC->order_total;
       	$plata2 = (string)$plata;
		//$orderC->order_status='payment_received';
		uc_payment_enter($order_id, 'payulatam',$plata2, 0, NULL, $comment);
		uc_order_update_status($order_id, 'payment_received');
		updateActiveRecurrenceByOrden($order_id);
	}elseif($tokenJson->transactionResponse->state=='DECLINED'){
		printVar($tokenJson->transactionResponse->responseMessage);
	}

	die();
}

function getDataToken($idBrmToken){
	$datax=array();
	$query=db_select('brm_recurrence_token','bt');
	$result=$query->fields('br',array('user_id','card_mask','token','franchise','active'))
	->condition('bt.active','S','=')
	->condition('bt.id',$idBrmToken,'=')
	->execute();

	$datap=0;
	while ($record=$result->fetchAssoc()) {
		$datax[$datap]['user_id']=$record['user_id'];
		$datax[$datap]['card_mask']=$record['card_mask'];
		$datax[$datap]['token']=$record['token'];
		$datax[$datap]['franchise']=$record['franchise'];
		$datap++;
	}

	return $datax;
}