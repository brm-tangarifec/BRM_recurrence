<?php

/**
 *Módulo para la recurrencia
 * Implement hook_menu()
 */

function BRM_recurrence_menu() {
  return array(
  	'cart/recurrence' => array(
  	'page callback' => 'recurrenceTpl',
  	'access arguments' => TRUE,
  	'access callback' => TRUE,
  	'type' => MENU_CALLBACK,
    ),
    'test/recurrence' => array(
  	'page callback' => 'recurrenceTest',
  	'access arguments' => TRUE,
  	'access callback' => TRUE,
  	'type' => MENU_CALLBACK,
    ),
    'admin/store/settings/brm-recurrence' => array(
      'title'            => t('Manage recurrence settings for BRM'),
      'description'      => t('Configure basic settings for recurrence'),
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('BRM_recurrence_admin_form'),
      'access arguments' => array('create-invoice'),

    ),
  );
}


//Función para generar los permisos de las url del menú
function BRM_recurrence_permission() {
  return array(
    'admin-recurrence' => array(
      'title'       => t("Recurrences Settings"),
      'description' => t("Allow the user to config the recurrence")
    )
  );
}
//Función para alterar el comportamiento de una url

function BRM_recurrence_url_inbound_alter(&$path, $original_path, $path_language) {

  // Se agrega js al carrito
  if (preg_match('|^cart(/.*)?|', $path, $matches)) {
  		drupal_add_js(drupal_get_path('module', 'BRM_recurrence') . '/js/recurrence.js', array( 'scope' => 'footer', 'weight' => 7 , 'group' => JS_LIBRARY, 'preprocess' => FALSE, 'cache' => FALSE));
  }

  if ($path=='cart/checkout') {
  	if(isset($_COOKIE['carritoR']) && !empty($_COOKIE['carritoR'])){
  		drupal_goto('cart/recurrence');
  	}
  }
}

//Función para cargar los temas

function BRM_recurrence_theme($existing, $type, $theme, $path){
    return array(
      'recurrence' => array(
        'template' => 'theme/recurrence'
      ),
      'tesnting' => array(
        'template' => 'theme/testrecurrence'
      ),
  );
}


/*Obtener el tpl para activar la recurrencia*/
function recurrenceTpl(){
	global $user;
	//printVar($user->uid);
	//printVar(base64_decode($_COOKIE['carritoR']));
	$carritoR=json_decode(base64_decode($_COOKIE['carritoR']));
	//printVar($carritoR);
	$orderActive=getLastOrderUser($user->uid);
      // Create a new order if necessary.
	//printVar($orderActive);
	
	if(!$orderActive){
		$order = uc_order_new($user->uid,'in_checkout');
		$order_id = $order->order_id;	
	}else{
		$order_id = $orderActive['order_id'];
	}
      //Se carga el iva
      $taxC = uc_taxes_rate_load('4');
      //Se llama la orden completa
      $order = uc_order_load($order_id,'ProductOrden');
      //Se agregan datos a la orden
      if(!getProducsByOrder($order_id)){
      	$order->products = uc_cart_get_contents();
      	saveDataRecurrence($order_id,$carritoR);
      }
      $order->payment_method = 'payulatam';

      //Se arma la data para agregar descuentos o cupones
      $cuponActive='';
      $dataUns['coupons']='';
      $dataUns=serialize($dataUns);
      $order->data=$dataUns;
      //Se guarda la orden
      //printVar(uc_order_product_revive($order->products),'Productos');
      uc_order_save($order);
      
      //printVar($order);
	$variables['carrito']= $order;
	return theme('recurrence',$variables);
}

/*Obtener el tpl para activar la recurrencia*/
function recurrenceTest(){
	//Función de prueba, migrar a la función que crea las ordenes
	//Se estipulan los tiempos
	$recurrencia=array('14','30','60','90');
	//printVar(uc_order_load('1299'),'La orden');
	//Se recorren los productos por ordenes
	for ($i=0; $i <count($recurrencia) ; $i++) {
		$RecurrerORder=getOrdersByTime($recurrencia[$i]);
		if(!empty($RecurrerORder)){
			//printVar($RecurrerORder,'Recurrente');
			foreach ($RecurrerORder as $key => $value) {
				//$dataOrder=getProducDataByOrder($key);
				$orderLoad=getOrderById($key);
				//Se obtiene la recurrencia por usuario
				$orderActive=getLastOrderDataUser($orderLoad->uid);
				//printVar($orderActive);
			      // Create a new order if necessary.
				//printVar($orderActive);
				if(!$orderActive){
					$orderC = uc_order_new($orderLoad->uid,'in_checkout');
					$order_id = $orderC->order_id;
				}else{
					$order_id = $orderActive['order_id'];
				}
				$orderC->order_status='in_recurrence';
				recurrenceStatus($order_id);
				
			      //Se carga el iva
			      $taxC = uc_taxes_rate_load('4');
			      //Se llama la orden completa
			      $orderC = uc_order_load($order_id);
			      //Se agregan datos a la orden
			      if(!getProducsByOrder($order_id)){
			      	$lastProduct=getLastOrderProduct();
			      	$newLast=(int)$lastProduct+1;
			      	$conteo=(int)$newLast;
			      	$productsNewOrder=array();
			      	$productInt=array();
			      	$productsOrders=getProducDataByOrder($key);
			      	//printVar($productsOrders,'Los productos');
			      	saveProductsByOrder($order_id,$productsOrders);
			      	//BRM_ponds_kit_uc_add_to_cart();
			      
			      	//$orderC->products = $productsNewOrder;
			      	$message='Orden creada para recurrencia obtenida de la orden '.$key;
			      	uc_order_comment_save($order_id,$orderLoad->uid, $message, $type = 'admin', $status = 'Pending', $notify = FALSE);
			      }
			      printVar(lineItemsOrder($key),$key);

			      printVar($orderC,'La orden');
			      $orderC->primary_email=$orderLoad->primary_email;
			      $orderC->delivery_first_name=$orderLoad->delivery_first_name;
			      $orderC->delivery_last_name=$orderLoad->delivery_last_name;
			      $orderC->delivery_phone=$orderLoad->delivery_phone;
			      $orderC->delivery_street1=$orderLoad->delivery_street1;
			      $orderC->delivery_city=$orderLoad->delivery_city;
			      $orderC->delivery_zone=$orderLoad->delivery_zone;
			      $orderC->delivery_country=$orderLoad->delivery_country;
			      $orderC->billing_first_name=$orderLoad->billing_first_name;
			      $orderC->billing_last_name=$orderLoad->billing_last_name;
			      $orderC->billing_phone=$orderLoad->billing_phone;
			      $orderC->billing_street1=$orderLoad->billing_street1;
			      $orderC->billing_city=$orderLoad->billing_city;
			      $orderC->billing_zone=$orderLoad->billing_zone;
			      $orderC->billing_country=$orderLoad->billing_country;
			      $orderC->payment_method = 'payulatam';

			      //Se arma la data para agregar descuentos o cupones
			      $cuponActive='';
			      $dataUns['coupons']='';
			      $dataUns=serialize($dataUns);
			      $orderC->data=$dataUns;
			      //Se guarda la orden
			      //printVar(uc_order_product_revive($order->products),'Productos');
			      //uc_order_save($orderC);
			      
			      //Se debe actualizar el estado de la orden para separlas
			      //printVar($dataOrder);
				//die();
			}
		}
	}

	

	$variables['carrito']= getBanderaRecurrence();
	return theme('tesnting',$variables);
}
//función para poner el estado de recurrencia
function recurrenceStatus($order_id){
	db_update('uc_orders')->fields(array(
		'order_status' => 'in_recurrence'
	))
	->condition('order_id',$order_id)
	->execute();
}
//Función para obtener los line items
function lineItemsOrder($order_id){
	$datax=array();
	$query=db_select('uc_order_line_items','ul');
	$result=$query->fields('ul',array('type','title','amount','weight','data'))
	->condition('order_id',$order_id,'=')
	->condition('type','tax','!=')
	->execute();
	while ($record=$result->fetchAssoc()) {
		$datax[]=$record;
	}

	return $datax;
}
//función para insertar los productos por orden
function saveProductsByOrder($order_id,$campos){
	//printVar($campos,$order_id);
	for ($i=0; $i <count($campos) ; $i++) { 
		printVar($campos[$i]);
		$return = db_insert('uc_order_products')
		->fields(array(
			'order_id' => $order_id,
			'nid' => $campos[$i]['nid'],
			'title' => $campos[$i]['title'],
			'model' => $campos[$i]['model'],
			'qty' =>$campos[$i]['qty'],
			'cost' =>$campos[$i]['cost'],
			'price'=>$campos[$i]['price'],
			'weight'=>$campos[$i]['weight'],
			'weight_units'=>$campos[$i]['weight_units'],
			'data'=>$campos[$i]['data'],
		))->execute();
//		return $return;
	}
}
//Función para obtener los datos de la orden
function getOrderById($order_id){
	$laOrden=uc_order_load($order_id);

	return $laOrden;
}
//Función para guardar el array con key
function recurrence_array_push_assoc($array, $key, $value){
	$array[$key] = $value;
	return $array;
}
//función para actualizar el id de los productos por orden
function getLastOrderProduct(){
	$query=db_select('uc_order_products','uop');
	$result=$query->fields('uop',array('order_product_id'))
	->range(0, 1)
	->orderBy('order_product_id', 'DESC')
	->execute();
	$record=$result->fetchAssoc();
	//printVar($record['order_product_id']);
	return $record['order_product_id'];

}
//Función para obtener la última orden
function getLastOrderDataUser($userId){
  //printVar($userId);
  $data=array();
  $re=db_select('uc_orders','ucu');
    $result=$re->fields('ucu',array('order_id'))
    ->condition('ucu.uid',$userId,'=')
    ->condition('ucu.order_status','in_recurrence','=')
    ->range(0,1)
    ->orderBy('ucu.order_id', 'DESC')
    ->execute()
    ->fetchAssoc();
  //printVar($result);
  return $result;
}


//Función para obtener los productos por kit
function orderByIdKit($idKit){
	$dataK=array();
	$query=db_select('uc_product_kits','upk');
	$result=$query->fields('upk',array('product_id'))
	->condition('upk.nid',$idKit,'=')
	->execute();
	while($record=$result->fetchAssoc()){
		$dataK[]=$record['product_id'];
	}
	return $dataK;
}
//Función para obtener los prodcutos y los kits
function getProducstByOrder($order_id){
	$dataK=array();
	$query=db_select('uc_order_products','uop');
	$result=$query->fields('uop',array('nid','data'))
	->condition('uop.order_id',$order_id,'=')
	->execute();
	while($record=$result->fetchAssoc()){
		$dataK[]=$record['product_id'];
	}
	return $dataK;
}
//Función para guardar las ordenes para almacenar las ordenes recurrentes
function saveDataRecurrence($order_id,$data=array()){
	$createDate=date('Y-m-d H:m:s');

	//printVar($order_id,'Orden');

	foreach ($data as $key => $value) {
		//printVar($value,'datos');
		for ($i=0; $i < count($value->productId) ; $i++) { 
			//printVar($value->productId[$i],'Product ID');
			saveRecurrenceByProduct($order_id,$value->kitId,$value->productId[$i],$value->frecuencia,$createDate);
		}
	}

/*;*/

}

//Función para guardar los datos por producto
function saveRecurrenceByProduct($order_id,$kitId,$productId,$drecurrence,$createDate){
	$return = db_insert('brm_recurrence')
	->fields(array(
		'order_id' => $order_id,
		'kit_id' => $kitId,
		'product_id' => $productId,
		'id_brm_recurrence_token' => 1000000,
		'recurrence_days' =>$drecurrence,
		'active' =>'n',
		'created'=>$createDate,
		'modificate'=>$createDate,
	))->execute();
	return $return;
}


//Función para comprobar si existen productos para la orden
function getProducsByOrder($order_id){
	$query=db_select('uc_order_products','upc');
	$result=$query->fields('upc',array('order_id'))
	->condition('upc.order_id',$order_id,'=')
	->execute();
	$return=$result->fetchAssoc();

	if(!empty($return)){
		return TRUE;
	}else{
		return FALSE;
	}
}

//Función para crear ordenes automaticas
function custorOrder($orderId){
//uc_order_comment_save($order->order_id, 0, t('Order created through website.'), 'admin');
}
//función para obtener los productos por fecha
function getOrdersByTime($time){
	//se hace el llamado a las ordenes dependiendo de la cantidad de tiempo
	$datax=array();
	$fechaRequest=date('Y-m-d');
	$fechaRequestN=date('Y-m-d', strtotime($fechaRequest. ' - '.$time.' days'));
	$start=date('Y-m-d 00:00:00', strtotime($fechaRequestN));
	$endt=date('Y-m-d 23:59:59', strtotime($fechaRequestN));
	$query=db_select('brm_recurrence','br');
	$result=$query->fields('br',array('order_id','kit_id','product_id','id_brm_recurrence_token','active','recurrence_days','modificate'))
	->condition('br.active','y','=')
	->condition('br.modificate',array($start,$endt), 'BETWEEN')
	->execute();
	
	while($record=$result->fetchAssoc()){
		$datax[]=$record;
	}
	$datar=array();
	for ($i=0; $i < count($datax) ; $i++) { 
		$idOrden = $datax[$i]['order_id'];
		if (count($datar[$idOrden])==0) {
			$datar[$idOrden] = array();
		}
		array_push($datar[$idOrden],$datax[$i]);
	}
	return $datar;
}

//Función para obtener los datos del producto por orden
function getProducDataByOrder($order_id){
	$datax=array();
	$query=db_select('uc_order_products','upc');
	$result=$query->fields('upc',array('order_id','nid','title','model','qty','cost','price','weight','weight_units','data'))
	->condition('upc.order_id',$order_id,'=')
	->execute();
	//$return=$result->fetchAssoc();
	while($record=$result->fetchAssoc()){
		$datax[]=$record;
	}

	return $datax;
}

//función para actualizar el token y estado de la orden recurrente
function updateRecurrenceByOrden($order_id,$tokenId){
	db_update('brm_recurrence')->fields(array(
    "id_brm_recurrence_token"=>$tokenId,
    "active"=>'y',
    "modificate"=> date('Y-m-d H:m:s'),
    ))
   ->condition('order_id', $order_id)
   ->execute();
}
//Función para crear el formulario de configuración,
function BRM_recurrence_admin_form($form, &$form_state) {
  $form = array(
    'BRM_recurrence_hour_request' => array(
      '#type'   => 'textfield',
      '#attributes' => array(
        ' type' => 'time', // insert space before attribute name :)
    	),
      '#title'  => t("Hour to request"),
      '#description'  => t("Field to enter the time at which the payu call is executed"),
      '#default_value'  =>  strtoupper(trim(ltrim(rtrim(variable_get('BRM_recurrence_hour_request')))))
    ),
    'BRM_recurrence_hour_down' => array(
      '#type'   => 'textfield',
      '#title'  => t("Hout to down the 'bandera'"),
      '#attributes' => array(
        ' type' => 'time', // insert space before attribute name :)
    	),
      '#description'  => t("Field to enter the time at which the flag is down"),
      '#default_value'  =>  trim(ltrim(rtrim(variable_get('BRM_recurrence_hour_down'))))
    ),
    'BRM_recurrence_mail_informer' => array(
      '#type'   => 'textfield',
      '#title'  => t("Mail information"),
      '#attributes' => array(
        ' type' => 'email', // insert space before attribute name :)
    	),
      '#description'  => t("Mail to send the approximate billing alert"),
      '#default_value'  =>  trim(ltrim(rtrim(variable_get('BRM_recurrence_mail_informer'))))
    ),
  );

  return system_settings_form($form);
}

//Función para ejecutar una función si la bandera se encuentra activa
function getBanderaRecurrence(){
	$data=array();
	$query=db_select('brm_bandera','bn');
	$result=$query->fields('bn',array('state'))
	->condition('id',1,'=')
	->range(0,1)
	->execute();
	$return=$result->fetchAssoc();

	return $return['state'];
}
//Función para bajar la bandera cada hora
function bajarBandera(){
	if(getBanderaRecurrence()=="S"){
		db_update('brm_bandera')->fields(array(
			"state"=>'N',
			"modificate" =>date('Y-m-d H:m:s')
		))
		->condition('id','1','=')
		->execute();
	}
}

//Se define el cron
function BRM_recurrence_cronapi($op, $job = NULL) {

  $items['bajar_bandera'] = array(
    'description' => 'Bajar la bandera cada hora para evitar la creación de ordenes',
    'callback' => 'bajarBandera',
  );


  return $items;
}

/*
**Creación de ordenes
$order = uc_order_new($user->uid, 'pending');
      $order_id = $order->order_id;
uc_order_save($order);
      $order = uc_order_load($order_id);

*/
