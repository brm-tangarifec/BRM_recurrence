<?php

/**
 *Módulo para la recurrencia
 * Implement hook_menu()
 */

function BRM_recurrence_menu() {
  return array(
  	'cart/recurrence' => array(
  	'page callback' => 'recurrenceTpl',
  	'access arguments' => TRUE,
  	'access callback' => TRUE,
  	'type' => MENU_CALLBACK,
    ),
    'test/recurrence' => array(
  	'page callback' => 'recurrenceTest',
  	'access arguments' => TRUE,
  	'access callback' => TRUE,
  	'type' => MENU_CALLBACK,
    ),
  );
}

//Función para alterar el comportamiento de una url

function BRM_recurrence_url_inbound_alter(&$path, $original_path, $path_language) {

  // Se agrega js al carrito
  if (preg_match('|^cart(/.*)?|', $path, $matches)) {
  		drupal_add_js(drupal_get_path('module', 'BRM_recurrence') . '/js/recurrence.js', array( 'scope' => 'footer', 'weight' => 7 , 'group' => JS_LIBRARY, 'preprocess' => FALSE, 'cache' => FALSE));
  }

  if ($path=='cart/checkout') {
  	if(isset($_COOKIE['carritoR']) && !empty($_COOKIE['carritoR'])){
  		drupal_goto('cart/recurrence');
  	}
  }
}

//Función para cargar los temas

function BRM_recurrence_theme($existing, $type, $theme, $path){
    return array(
      'recurrence' => array(
        'template' => 'theme/recurrence'
      ),
      'tesnting' => array(
        'template' => 'theme/testrecurrence'
      ),
  );
}


/*Obtener el tpl para activar la recurrencia*/
function recurrenceTpl(){
	global $user;
	//printVar($user->uid);
	//printVar(base64_decode($_COOKIE['carritoR']));
	$carritoR=json_decode(base64_decode($_COOKIE['carritoR']));
	//printVar($carritoR);
	$orderActive=getLastOrderUser($user->uid);
      // Create a new order if necessary.
	//printVar($orderActive);
	
	if(!$orderActive){
		$order = uc_order_new($user->uid,'in_checkout');
		$order_id = $order->order_id;	
	}else{
		$order_id = $orderActive['order_id'];
	}
      //Se carga el iva
      $taxC = uc_taxes_rate_load('4');
      //Se llama la orden completa
      $order = uc_order_load($order_id,'ProductOrden');
      //Se agregan datos a la orden
      if(!getProducsByOrder($order_id)){
      	$order->products = uc_cart_get_contents();
      	saveDataRecurrence($order_id,$carritoR);
      }
      $order->payment_method = 'payulatam';

      //Se arma la data para agregar descuentos o cupones
      $cuponActive='';
      $dataUns['coupons']='';
      $dataUns=serialize($dataUns);
      $order->data=$dataUns;
      //Se guarda la orden
      //printVar(uc_order_product_revive($order->products),'Productos');
      uc_order_save($order);
      
      //printVar($order);
	$variables['carrito']= $order;
	return theme('recurrence',$variables);
}

/*Obtener el tpl para activar la recurrencia*/
function recurrenceTest(){
	global $user;
	$order_id='1295';
	$order=uc_order_load($order_id);
	
	$variables['carrito']= $order;
	return theme('tesnting',$variables);
}


//Función para obtener los productos por kit
function orderByIdKit($idKit){
	$dataK=array();
	$query=db_select('uc_product_kits','upk');
	$result=$query->fields('upk',array('product_id'))
	->condition('upk.nid',$idKit,'=')
	->execute();
	while($record=$result->fetchAssoc()){
		$dataK[]=$record['product_id'];
	}
	return $dataK;
}
//Función para obtener los prodcutos y los kits
function getProducstByOrder($order_id){
	$dataK=array();
	$query=db_select('uc_order_products','uop');
	$result=$query->fields('uop',array('nid','data'))
	->condition('uop.order_id',$order_id,'=')
	->execute();
	while($record=$result->fetchAssoc()){
		$dataK[]=$record['product_id'];
	}
	return $dataK;
}
//Función para guardar las ordenes para almacenar las ordenes recurrentes
function saveDataRecurrence($order_id,$data=array()){

	//printVar($order_id,'Orden');

	foreach ($data as $key => $value) {
		//printVar($value,'datos');
		for ($i=0; $i < count($value->productId) ; $i++) { 
			//printVar($value->productId[$i],'Product ID');
			saveRecurrenceByProduct($order_id,$value->kitId,$value->productId[$i],$value->frecuencia);
		}
	}

/*;*/

}

//Función para guardar los datos por producto
function saveRecurrenceByProduct($order_id,$kitId,$productId,$drecurrence){
	$return = db_insert('brm_recurrence')
	->fields(array(
		'order_id' => $order_id,
		'kit_id' => $kitId,
		'product_id' => $productId,
		'id_brm_recurrence_token' => 1000000,
		'recurrence_days' =>$drecurrence,
		'active' =>'n',
		'created' => REQUEST_TIME,
	))->execute();
	return $return;
}


//Función para comprobar si existen productos para la orden
function getProducsByOrder($order_id){
	$query=db_select('uc_order_products','upc');
	$result=$query->fields('upc',array('order_id'))
	->condition('upc.order_id',$order_id,'=')
	->execute();
	$return=$result->fetchAssoc();

	if(!empty($return)){
		return TRUE;
	}else{
		return FALSE;
	}
}

//Función para crear ordenes automaticas
function custorOrder($orderId){

}

//función para actualizar el token y estado de la orden recurrente
function updateRecurrenceByOrden($order_id,$tokenId){
	db_update('brm_recurrence')->fields(array(
    "id_brm_recurrence_token"=>$tokenId,
    "active"=>'y',
    "created"=> REQUEST_TIME,
    ))
   ->condition('order_id', $order_id)
   ->execute();
}

//Función para actualizar las ordenes
/*
**Creación de ordenes
$order = uc_order_new($user->uid, 'pending');
      $order_id = $order->order_id;
uc_order_save($order);
      $order = uc_order_load($order_id);

*/
