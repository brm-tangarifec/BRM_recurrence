<?php

/**
 *Módulo para la recurrencia
 * Implement hook_menu()
 */

function BRM_recurrence_menu() {
  return array(
  	'cart/recurrence' => array(
  	'page callback' => 'recurrenceTpl',
  	'access arguments' => TRUE,
  	'access callback' => TRUE,
  	'type' => MENU_CALLBACK,


    ),
  );
}

//Función para alterar el comportamiento de una url

function BRM_recurrence_url_inbound_alter(&$path, $original_path, $path_language) {

  // Se agrega js al carrito
  if (preg_match('|^cart(/.*)?|', $path, $matches)) {
  		drupal_add_js(drupal_get_path('module', 'BRM_recurrence') . '/js/recurrence.js', array( 'scope' => 'footer', 'weight' => 7 , 'group' => JS_LIBRARY, 'preprocess' => FALSE, 'cache' => FALSE));
  }

  if ($path=='cart/checkout') {
  	if(isset($_COOKIE['carritoR']) && !empty($_COOKIE['carritoR'])){
  		drupal_goto('cart/recurrence');
  	}
  }
}

//Función para cargar los temas

function BRM_recurrence_theme($existing, $type, $theme, $path){
    return array(
      'recurrence' => array(
        'template' => 'theme/recurrence'
      ),
  );
}


/*Obtener el tpl para activar la recurrencia*/
function recurrenceTpl(){
	global $user;
	//printVar($user->uid);
	//printVar(base64_decode($_COOKIE['carritoR']));
	$carritoR=json_decode(base64_decode($_COOKIE['carritoR']));
	printVar($carritoR);
	$orderActive=getLastOrderUser($user->uid);
      // Create a new order if necessary.
	//printVar($orderActive);
	
	if(!$orderActive){
		$order = uc_order_new($user->uid,'in_checkout');
		$order_id = $order->order_id;	
	}else{
		$order_id = $orderActive['order_id'];
	}
      //Se carga el iva
      $taxC = uc_taxes_rate_load('4');
      //Se llama la orden completa
      $order = uc_order_load($order_id);
      //Se agregan datos a la orden
      if(!uc_order_product_revive($order->products)){
      	$order->products = uc_cart_get_contents();
      }
      $order->payment_method = 'payulatam';

      //Se arma la data para agregar descuentos o cupones
      $cuponActive='';
      $dataUns['coupons']='';
      $dataUns=serialize($dataUns);
      $order->data=$dataUns;
      //Se guarda la orden
      //printVar(uc_order_product_revive($order->products),'Productos');
      uc_order_save($order);
      //printVar($order);

      //die();
      //
		/*foreach ($carritoR as $key => $value) {
			printVar($value);
			$productK=orderByIdKit($value->kitId);
			printVar($productK);
			for ($i=0; $i < count($productK); $i++) {
				$productNode = node_load($productK[$i]);
				printVar($productNode);
				//$product = uc_product_load($productNode);
				printVar($product,'Producto');
			}
			
		}*/
	$variables['carrito']= $order;
	return theme('recurrence',$variables);
}


function orderByIdKit($idKit){
	$dataK=array();
	$query=db_select('uc_product_kits','upk');
	$result=$query->fields('upk',array('product_id'))
	->condition('upk.nid',$idKit,'=')
	->execute();
	while($record=$result->fetchAssoc()){
		$dataK[]=$record['product_id'];
	}
	return $dataK;
}


function saveDataRecurrence($idKit,$kit,$recurrence){
$return = $upd= db_insert('brm_recurrence')
->fields(array(
	'order_id' =>1 ,
	'product_id' => 1,
	'id_brm_recurrence_token' => 1,
	'recurrence_days' =>1,
	'active' =>'y',
	'created' => REQUEST_TIME,
))->execute();
}

//Función para crear ordenes automaticas
function custorOrder($orderId){

}
/*
**Creación de ordenes
$order = uc_order_new($user->uid, 'pending');
      $order_id = $order->order_id;
uc_order_save($order);
      $order = uc_order_load($order_id);

*/